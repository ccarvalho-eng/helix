import { Template } from '../types';

export const iotDataProcessingTemplate: Template = {
  id: 'iot-data-processing',
  name: 'IoT Data Processing Pipeline',
  description: 'Complete IoT data processing pipeline using all node types',
  category: 'data-analysis',
  nodes: [
    {
      id: 'sensor-data',
      type: 'input',
      label: 'IoT Sensor Input',
      description: 'Raw sensor data from IoT devices',
      x: 100,
      y: 300,
    },
    {
      id: 'temperature-sensor',
      type: 'sensor',
      label: 'Temperature Sensor',
      description: 'Monitor temperature readings from devices',
      x: 300,
      y: 200,
      config: {
        sensor_type: 'temperature',
        sampling_rate: '1Hz',
        units: 'celsius',
      },
    },
    {
      id: 'pressure-sensor',
      type: 'sensor',
      label: 'Pressure Sensor',
      description: 'Monitor pressure readings from devices',
      x: 300,
      y: 300,
      config: {
        sensor_type: 'pressure',
        sampling_rate: '0.5Hz',
        units: 'psi',
      },
    },
    {
      id: 'humidity-sensor',
      type: 'sensor',
      label: 'Humidity Sensor',
      description: 'Monitor humidity levels from devices',
      x: 300,
      y: 400,
      config: {
        sensor_type: 'humidity',
        sampling_rate: '0.2Hz',
        units: 'percentage',
      },
    },
    {
      id: 'sensor-memory',
      type: 'memory',
      label: 'Sensor Data Buffer',
      description: 'Buffer sensor readings for batch processing',
      x: 500,
      y: 150,
      config: {
        storage_type: 'ring_buffer',
        capacity: '1000_readings',
        retention: '24_hours',
      },
    },
    {
      id: 'data-transformer',
      type: 'transform',
      label: 'Data Normalizer',
      description: 'Normalize and standardize sensor data formats',
      x: 500,
      y: 300,
      config: {
        transformations: 'unit_conversion, scaling, filtering',
        output_format: 'json_timeseries',
      },
    },
    {
      id: 'anomaly-detector',
      type: 'skill',
      label: 'Anomaly Detection',
      description: 'Detect unusual patterns in sensor data',
      x: 700,
      y: 200,
      config: {
        skill_type: 'ml_anomaly_detection',
        parameters: 'statistical_outliers, threshold_detection',
      },
    },
    {
      id: 'pattern-analyzer',
      type: 'agent',
      label: 'Pattern Analysis Agent',
      description: 'AI agent to analyze sensor data patterns',
      x: 700,
      y: 350,
      config: {
        model: 'time-series-llm',
        temperature: 0.2,
        max_tokens: 600,
        system_prompt: 'Analyze IoT sensor patterns and identify trends.',
      },
    },
    {
      id: 'threshold-check',
      type: 'decision',
      label: 'Critical Threshold?',
      description: 'Check if sensor readings exceed critical thresholds',
      x: 900,
      y: 275,
      config: {
        condition_type: 'javascript',
        condition: 'checkCriticalThresholds(sensorData)',
      },
    },
    {
      id: 'alert-api',
      type: 'api',
      label: 'Alert System API',
      description: 'Send alerts to monitoring systems',
      x: 1100,
      y: 150,
      config: {
        endpoint: '/api/alerts/send',
        method: 'POST',
        authentication: 'api_key',
      },
    },
    {
      id: 'monitoring-loop',
      type: 'loop',
      label: 'Continuous Monitor',
      description: 'Continuous monitoring and processing loop',
      x: 1100,
      y: 275,
      config: {
        loop_type: 'infinite',
        interval: '30_seconds',
        break_condition: 'system_shutdown',
      },
    },
    {
      id: 'data-aggregation',
      type: 'skill',
      label: 'Data Aggregation',
      description: 'Aggregate sensor data for reporting',
      x: 1100,
      y: 400,
      config: {
        skill_type: 'data_aggregation',
        parameters: 'hourly_avg, daily_max, weekly_trends',
      },
    },
    {
      id: 'dashboard-api',
      type: 'api',
      label: 'Dashboard API',
      description: 'Update real-time dashboards',
      x: 1300,
      y: 200,
      config: {
        endpoint: '/api/dashboard/update',
        method: 'PUT',
        authentication: 'jwt',
      },
    },
    {
      id: 'historical-memory',
      type: 'memory',
      label: 'Historical Data Store',
      description: 'Long-term storage for historical analysis',
      x: 1300,
      y: 350,
      config: {
        storage_type: 'time_series_db',
        retention_policy: '2_years',
        compression: 'enabled',
      },
    },
    {
      id: 'processed-insights',
      type: 'output',
      label: 'IoT Insights',
      description: 'Processed sensor insights and alerts',
      x: 1500,
      y: 275,
    },
  ],
  connections: [
    {
      source: 'sensor-data',
      target: 'temperature-sensor',
      sourceHandle: 'right',
      targetHandle: 'left',
    },
    {
      source: 'sensor-data',
      target: 'pressure-sensor',
      sourceHandle: 'right',
      targetHandle: 'left',
    },
    {
      source: 'sensor-data',
      target: 'humidity-sensor',
      sourceHandle: 'right',
      targetHandle: 'left',
    },
    {
      source: 'temperature-sensor',
      target: 'sensor-memory',
      sourceHandle: 'right',
      targetHandle: 'left',
    },
    {
      source: 'pressure-sensor',
      target: 'data-transformer',
      sourceHandle: 'right',
      targetHandle: 'left',
    },
    {
      source: 'humidity-sensor',
      target: 'data-transformer',
      sourceHandle: 'right',
      targetHandle: 'left',
    },
    {
      source: 'sensor-memory',
      target: 'anomaly-detector',
      sourceHandle: 'right',
      targetHandle: 'left',
    },
    {
      source: 'data-transformer',
      target: 'anomaly-detector',
      sourceHandle: 'right',
      targetHandle: 'left',
    },
    {
      source: 'data-transformer',
      target: 'pattern-analyzer',
      sourceHandle: 'right',
      targetHandle: 'left',
    },
    {
      source: 'anomaly-detector',
      target: 'threshold-check',
      sourceHandle: 'right',
      targetHandle: 'left',
    },
    {
      source: 'pattern-analyzer',
      target: 'threshold-check',
      sourceHandle: 'right',
      targetHandle: 'left',
    },
    {
      source: 'threshold-check',
      target: 'alert-api',
      sourceHandle: 'right',
      targetHandle: 'left',
    },
    {
      source: 'threshold-check',
      target: 'monitoring-loop',
      sourceHandle: 'right',
      targetHandle: 'left',
    },
    {
      source: 'threshold-check',
      target: 'data-aggregation',
      sourceHandle: 'right',
      targetHandle: 'left',
    },
    {
      source: 'alert-api',
      target: 'dashboard-api',
      sourceHandle: 'right',
      targetHandle: 'left',
    },
    {
      source: 'monitoring-loop',
      target: 'dashboard-api',
      sourceHandle: 'right',
      targetHandle: 'left',
    },
    {
      source: 'data-aggregation',
      target: 'historical-memory',
      sourceHandle: 'right',
      targetHandle: 'left',
    },
    {
      source: 'dashboard-api',
      target: 'processed-insights',
      sourceHandle: 'right',
      targetHandle: 'left',
    },
    {
      source: 'historical-memory',
      target: 'processed-insights',
      sourceHandle: 'right',
      targetHandle: 'left',
    },
    // Loop back connection for continuous monitoring
    {
      source: 'monitoring-loop',
      target: 'data-transformer',
      sourceHandle: 'right',
      targetHandle: 'left',
    },
  ],
};
