name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  MIX_ENV: test
  ELIXIR_VERSION: "1.17"
  OTP_VERSION: "27"
  NODE_VERSION: "18"

jobs:
  test:
    name: Unit Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: helix_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Elixir
        uses: ./.github/actions/setup-elixir
        with:
          elixir-version: ${{ env.ELIXIR_VERSION }}
          otp-version: ${{ env.OTP_VERSION }}

      - name: Setup Node.js
        uses: ./.github/actions/setup-node
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Check formatting
        run: mix format --check-formatted

      - name: Compile (test)
        run: mix compile --warnings-as-errors

      - name: Build assets
        run: mix assets.build

      - name: Run tests with coverage
        run: mix coveralls.json

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        continue-on-error: true
        with:
          file: ./cover/excoveralls.json
          flags: elixir
          fail_ci_if_error: false
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  credo:
    name: Code Quality (Credo)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Elixir
        uses: ./.github/actions/setup-elixir
        with:
          elixir-version: ${{ env.ELIXIR_VERSION }}
          otp-version: ${{ env.OTP_VERSION }}

      - name: Compile (dev)
        run: MIX_ENV=dev mix compile

      - name: Run Credo
        run: mix credo

  dialyzer:
    name: Static Analysis (Dialyzer)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Elixir
        uses: ./.github/actions/setup-elixir
        with:
          elixir-version: ${{ env.ELIXIR_VERSION }}
          otp-version: ${{ env.OTP_VERSION }}

      - name: Restore PLT cache
        uses: actions/cache@v4
        with:
          path: priv/plts
          key: ${{ runner.os }}-dialyzer-${{ env.OTP_VERSION }}-${{ env.ELIXIR_VERSION }}-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-dialyzer-${{ env.OTP_VERSION }}-${{ env.ELIXIR_VERSION }}-

      - name: Compile (dev)
        run: MIX_ENV=dev mix compile

      - name: Run Dialyzer
        run: mix dialyzer

  frontend:
    name: Frontend Quality
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: ./.github/actions/setup-node
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Check code style
        run: npm run prettier:check

      - name: Run TypeScript check
        run: npx tsc --noEmit

      - name: Run ESLint
        run: npx eslint assets/js --ext .js,.ts,.tsx --max-warnings 0

      - name: Run unit tests
        run: echo "No frontend unit tests yet" && exit 0

      - name: Upload frontend coverage
        uses: codecov/codecov-action@v5
        continue-on-error: true
        with:
          file: ./coverage/lcov.info
          flags: frontend
          fail_ci_if_error: false
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  unused-deps:
    name: Check Unused Dependencies
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Elixir
        uses: ./.github/actions/setup-elixir
        with:
          elixir-version: ${{ env.ELIXIR_VERSION }}
          otp-version: ${{ env.OTP_VERSION }}

      - name: Check for unused dependencies
        run: mix deps.unlock --check-unused
